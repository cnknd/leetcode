I"<p>We start with a warmup: <a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/">Two Sum with Sorted Input</a>.
In this problem we can employ a common trick with pointers that we can use to traverse an array to find the answer weâ€™re looking for.
The problem gives us a sorted array and asks us to find two elements in the array (canâ€™t use the same element twice) that sum to a given target. The answer will be <code>numbers[i]</code> and <code>numbers[j]</code>, for some <code>i</code> and <code>j</code> such that <code>i &lt; j</code>. Letâ€™s try to scan the array for <code>i</code> and <code>j</code>. Naively for each <code>i</code>, we look through all values of <code>j &gt; i</code>.  This naive approach runs in quadratic time. Itâ€™s doing a lot of redundant work since our array is already sorted: if at some point in our search (at <code>i1</code>, <code>j1</code>), the sum of the two numbers weâ€™re looking at is larger than the target, then we donâ€™t have to look at <code>j &gt; j1</code>, as the answer wonâ€™t be there. Similarly, if the sum is smaller than the target, then we donâ€™t have to look at <code>i &lt; i1</code>.
Using these observations, we can start our <code>i</code> and <code>j</code> pointers at the two ends of the array, and either imcrement <code>i</code> or decrement <code>j</code> depending on how the current sum compares to the target. This way we only visit each element in the array once, so the improved algorithm runs in linear time.
Here is the code for the solution:</p>

<pre><code class="language-python">class Solution:
    def twoSum(self, numbers: List[int], target: int) -&gt; List[int]:
        i, j = 0, len(numbers)-1
        while i &lt; j:
            tmp_sum = numbers[i] + numbers[j]
            if tmp_sum &lt; target:
                i += 1
            elif tmp_sum &gt; target:
                j -= 1
            else:
                return [i+1, j+1]
</code></pre>

<p>Find out more by <a href="https://github.com/cnknd/leetcode">visiting my GitHub project</a>.</p>
:ET